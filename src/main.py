"""Ponto de entrada principal da aplica√ß√£o."""

import sys
import os

# Adicionar o diret√≥rio raiz ao path para imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.interface.cli import CLIInterface
from src.utils.helpers import SystemHelper, ConfigHelper


def check_environment() -> bool:
    """
    Verifica se o ambiente est√° configurado corretamente.

    Returns:
        True se ambiente est√° OK, False caso contr√°rio
    """
    print("üîç Verificando ambiente...")

    # Verificar depend√™ncias
    dependencies = SystemHelper.check_dependencies()
    missing_deps = [dep for dep, available in dependencies.items() if not available]

    if missing_deps:
        print("‚ùå Depend√™ncias faltando:")
        for dep in missing_deps:
            print(f"   ‚Ä¢ {dep}")
        print("\nüí° Execute: pip install -r requirements.txt")
        return False

    print("‚úÖ Todas as depend√™ncias est√£o dispon√≠veis")

    # Verificar configura√ß√£o
    config_issues = ConfigHelper.validate_config()

    if config_issues:
        print("‚ö†Ô∏è  Problemas de configura√ß√£o encontrados:")
        for issue in config_issues:
            print(f"   ‚Ä¢ {issue}")
        print("\nüí° Verifique o arquivo .env ou config/settings.py")
        return False

    print("‚úÖ Configura√ß√£o v√°lida")
    return True


def main() -> None:
    """Fun√ß√£o principal da aplica√ß√£o."""
    try:
        # Verificar ambiente
        if not check_environment():
            print("\n‚ùå Ambiente n√£o est√° configurado corretamente")
            sys.exit(1)

        # Inicializar e executar interface CLI
        cli = CLIInterface()
        cli.run()

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Aplica√ß√£o interrompida pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico na aplica√ß√£o: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()