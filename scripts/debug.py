#!/usr/bin/env python3
"""
Exemplo de uso do Agente SQL com funcionalidades de debug.

Este script demonstra como usar o agente SQL em modo de desenvolvimento
para visualizar e analisar as queries SQL geradas.
"""

import sys
import os
from typing import List, Dict, Any

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.agent import SQLAgent
from src.interface.display import DisplayManager


def demonstrate_debug_features():
    """Demonstra as funcionalidades de debug do agente SQL."""

    print("üöÄ Demonstra√ß√£o das Funcionalidades de Debug")
    print("=" * 60)

    # Inicializar componentes
    try:
        agent = SQLAgent()
        display = DisplayManager()

        # Ativar modo debug
        agent.set_debug_mode(True)
        print("‚úÖ Agente inicializado com sucesso!\n")

    except Exception as e:
        print(f"‚ùå Erro ao inicializar: {e}")
        return

    # Lista de perguntas de exemplo para demonstra√ß√£o
    sample_questions = [
        "Quantas colunas tem a tabela dados_sus3?",
        "Quantos registros existem na tabela?",
        "Quantos estados diferentes temos nos dados?",
        "Qual a idade m√©dia dos pacientes?",
        "Quantos pacientes s√£o do sexo masculino?"
    ]

    print("üìö Testando perguntas de exemplo com debug ativado:")
    print("-" * 60)

    for i, question in enumerate(sample_questions, 1):
        print(f"\nüîç TESTE {i}: {question}")
        print("=" * 50)

        try:
            # Processar pergunta
            result = agent.process_query(question)

            # Mostrar resultado com debug
            display.show_query_result(result, show_queries=True)

            # An√°lise adicional das queries
            if 'executed_queries' in result and result['executed_queries']:
                print(f"\nüìä AN√ÅLISE DAS QUERIES:")

                for j, query in enumerate(result['executed_queries'], 1):
                    print(f"\n   Query {j}: {query}")

                    # Analisar performance da query
                    perf_data = agent.analyze_query_performance(query)
                    complexity = perf_data.get('estimated_complexity', 'desconhecida')
                    analysis_time = perf_data.get('analysis_time_ms', 0)

                    print(f"   ‚ö° Complexidade: {complexity}")
                    print(f"   üïê Tempo de an√°lise: {analysis_time:.2f}ms")

                    if 'error' in perf_data:
                        print(f"   ‚ö†Ô∏è  Erro na an√°lise: {perf_data['error']}")

        except Exception as e:
            print(f"‚ùå Erro ao processar pergunta: {e}")

        print("\n" + "‚îÄ" * 60)


def demonstrate_query_analysis():
    """Demonstra an√°lise de queries SQL espec√≠ficas."""

    print("\n\nüî¨ Demonstra√ß√£o de An√°lise de Queries Espec√≠ficas")
    print("=" * 60)

    try:
        agent = SQLAgent()
        display = DisplayManager()

        # Queries de exemplo para an√°lise
        sample_queries = [
            # Query simples
            "SELECT COUNT(*) FROM dados_sus3;",

            # Query com filtro
            "SELECT COUNT(*) FROM dados_sus3 WHERE SEXO = 1;",

            # Query com GROUP BY
            "SELECT UF_RESIDENCIA_PACIENTE, COUNT(*) FROM dados_sus3 GROUP BY UF_RESIDENCIA_PACIENTE;",

            # Query mais complexa
            """SELECT UF_RESIDENCIA_PACIENTE,
                      AVG(IDADE) as idade_media,
                      COUNT(*)   as total_pacientes
               FROM dados_sus3
               WHERE IDADE > 18
               GROUP BY UF_RESIDENCIA_PACIENTE
               ORDER BY total_pacientes DESC LIMIT 10;"""
        ]

        for i, query in enumerate(sample_queries, 1):
            print(f"\nüìù AN√ÅLISE DE QUERY {i}:")
            print("-" * 40)

            # Mostrar query formatada
            formatted_query = display._format_sql_query(query)
            print("Query:")
            print(formatted_query)

            # Analisar performance
            perf_data = agent.analyze_query_performance(query)
            display.show_query_performance(perf_data)

    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")


def demonstrate_development_workflow():
    """Demonstra um workflow t√≠pico de desenvolvimento."""

    print("\n\nüõ†Ô∏è  Workflow de Desenvolvimento T√≠pico")
    print("=" * 60)

    print("""
üìã PASSOS RECOMENDADOS PARA DESENVOLVIMENTO:

1Ô∏è‚É£  CONFIGURA√á√ÉO INICIAL:
   ‚Ä¢ Configure .env com DEBUG_MODE=true
   ‚Ä¢ Use MODEL_TEMPERATURE=0.1 para consist√™ncia
   ‚Ä¢ Ative VERBOSE=true para logs detalhados

2Ô∏è‚É£  TESTE DE PERGUNTAS B√ÅSICAS:
   ‚Ä¢ "Quantas colunas tem a tabela?"
   ‚Ä¢ "Quantos registros existem?"
   ‚Ä¢ Verifique se as queries SQL fazem sentido

3Ô∏è‚É£  AN√ÅLISE DE QUERIES:
   ‚Ä¢ Use /debug on na CLI
   ‚Ä¢ Observe as queries geradas
   ‚Ä¢ Identifique padr√µes e problemas

4Ô∏è‚É£  OTIMIZA√á√ÉO:
   ‚Ä¢ Use /performance on para medir tempos
   ‚Ä¢ Teste queries com /analyze
   ‚Ä¢ Ajuste prompts se necess√°rio

5Ô∏è‚É£  VALIDA√á√ÉO:
   ‚Ä¢ Teste casos extremos
   ‚Ä¢ Verifique tratamento de erros
   ‚Ä¢ Confirme seguran√ßa das queries

üí° DICAS IMPORTANTES:

‚úÖ DO (Fa√ßa):
   ‚Ä¢ Sempre verifique as queries SQL geradas
   ‚Ä¢ Teste com dados reais do seu dom√≠nio
   ‚Ä¢ Use fallbacks para queries comuns
   ‚Ä¢ Monitore performance de queries complexas

‚ùå DON'T (N√£o fa√ßa):
   ‚Ä¢ N√£o confie cegamente nas queries geradas
   ‚Ä¢ N√£o ignore queries muito lentas
   ‚Ä¢ N√£o permita queries destrutivas
   ‚Ä¢ N√£o esque√ßa de validar entradas do usu√°rio

üîß COMANDOS √öTEIS NA CLI:

   /debug on          # Ativar visualiza√ß√£o de queries
   /performance on    # Ativar an√°lise de performance
   /analyze SELECT... # Testar query espec√≠fica
   /tips             # Ver dicas de desenvolvimento
    """)


def main():
    """Fun√ß√£o principal do exemplo."""

    print("ü§ñ EXEMPLO DE USO - AGENTE SQL COM DEBUG")
    print("=" * 70)

    try:
        # Demonstrar funcionalidades de debug
        demonstrate_debug_features()

        # Demonstrar an√°lise de queries
        demonstrate_query_analysis()

        # Mostrar workflow de desenvolvimento
        demonstrate_development_workflow()

        print("\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("\nüí° Para usar na pr√°tica:")
        print("   1. Execute: python -m src.main")
        print("   2. Use /debug on para ativar debug")
        print("   3. Fa√ßa suas perguntas e observe as queries SQL")

    except Exception as e:
        print(f"\n‚ùå Erro durante demonstra√ß√£o: {e}")
        print("üîß Verifique se:")
        print("   ‚Ä¢ O banco de dados existe")
        print("   ‚Ä¢ As depend√™ncias est√£o instaladas")
        print("   ‚Ä¢ O modelo Ollama est√° dispon√≠vel")


if __name__ == "__main__":
    main()