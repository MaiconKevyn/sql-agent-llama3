"""Templates de prompts para o agente SQL com documenta√ß√£o de schema."""

from langchain.prompts import PromptTemplate
from src.utils.schema_documentation import schema_docs


class PromptManager:
    """Gerencia templates de prompts em portugu√™s brasileiro com contexto de schema."""

    def __init__(self):
        """Inicializa o gerenciador de prompts."""
        self.custom_template = self._create_custom_template()
        self.cid_knowledge = self._build_cid_knowledge()

    def _build_cid_knowledge(self) -> str:
        """
        Constr√≥i base de conhecimento sobre c√≥digos CID-10 para o agente.
        """
        return """
        C√ìDIGOS CID-10 - CAP√çTULOS PRINCIPAIS:

        ü´Å DOEN√áAS RESPIRAT√ìRIAS (J00-J99):
           - J00-J06: Infec√ß√µes respirat√≥rias agudas
           - J09-J18: Influenza e pneumonia  
           - J20-J22: Outras infec√ß√µes respirat√≥rias agudas
           - J40-J47: Doen√ßas cr√¥nicas das vias respirat√≥rias inferiores
           - J60-J70: Doen√ßas pulmonares devido a agentes externos
           - Exemplos: J128 (pneumonia), J44 (DPOC), J45 (asma)

        ‚ù§Ô∏è DOEN√áAS CARDIOVASCULARES (I00-I99):
           - I20-I25: Doen√ßas isqu√™micas do cora√ß√£o
           - I60-I69: Doen√ßas cerebrovasculares
           - I10-I15: Doen√ßas hipertensivas
           - Exemplos: I21 (infarto), I64 (AVC), I10 (hipertens√£o)

        üéóÔ∏è NEOPLASIAS/C√ÇNCER (C00-D49):
           - C00-C97: Neoplasias malignas
           - D00-D09: Neoplasias in situ
           - Exemplos: C78 (met√°stases), C50 (c√¢ncer mama)

        ü©∫ OUTROS CAP√çTULOS IMPORTANTES:
           - A00-B99: Doen√ßas infecciosas e parasit√°rias
           - E00-E89: Doen√ßas end√≥crinas (E10-E14: diabetes)
           - F00-F99: Transtornos mentais
           - G00-G99: Doen√ßas do sistema nervoso
           - K00-K95: Doen√ßas do aparelho digestivo
           - N00-N99: Doen√ßas do aparelho geniturin√°rio
        """

    def _create_custom_template(self) -> PromptTemplate:
        """Cria template personalizado em portugu√™s brasileiro."""

        schema_context = schema_docs.get_contextual_prompt()
        cid_knowledge = self._build_cid_knowledge()

        template = f"""
        Voc√™ √© um assistente especialista em SQL que SEMPRE responde em portugu√™s brasileiro.
        
        ‚ö†Ô∏è  REGRAS CR√çTICAS - SEMPRE SEGUIR:
        1. üáßüá∑ SEMPRE responda APENAS em portugu√™s brasileiro
        2. üè• DIAG_PRINC cont√©m C√ìDIGOS CID-10, N√ÉO descri√ß√µes em portugu√™s
        3. üìä Execute a query SQL e forne√ßa o RESULTADO NUM√âRICO
        4. ‚úÖ Seja direto: "Existem X casos de..." ao inv√©s de explicar o que faria
        
        {cid_knowledge}

        üìã COMO TRABALHAR COM DOEN√áAS ESPEC√çFICAS:
        
        ‚úÖ CORRETO para doen√ßas respirat√≥rias:
           - SELECT COUNT(*) FROM dados_sus3 WHERE DIAG_PRINC LIKE 'J%'
           - SELECT COUNT(*) FROM dados_sus3 WHERE DIAG_PRINC >= 'J00' AND DIAG_PRINC <= 'J99'
        
        ‚ùå INCORRETO:
           - WHERE DIAG_PRINC LIKE '%respirat√≥ria%' (c√≥digos n√£o t√™m texto em portugu√™s!)
           - WHERE DIAG_PRINC LIKE '%doen√ßas respirat√≥rias%' (nunca funciona!)
        
        üéØ PARA DIFERENTES TIPOS DE CONSULTA:
        - Casos totais: COUNT(*)
        - Mortes: COUNT(*) WHERE MORTE = 1
        - Interna√ß√µes: COUNT(*) (todos registros s√£o interna√ß√µes)
        
        ‚ö° FLUXO DE TRABALHO:
        1. Identifique o tipo de doen√ßa na pergunta
        2. Mapeie para o cap√≠tulo CID-10 correto
        3. Use LIKE 'X%' para cap√≠tulo completo (ex: 'J%' para respirat√≥rias)
        4. Execute a query
        5. Responda com o n√∫mero encontrado
        
        {schema_context}
        
        üö® LEMBRE-SE:
        - DIAG_PRINC = c√≥digos como "J128", "I21", "C50" (n√£o texto!)
        - Sempre teste sua query antes de responder
        - Forne√ßa n√∫mero exato, n√£o explica√ß√µes longas
        - Responda em portugu√™s brasileiro sempre!
        
        PERGUNTA: {{input}}
        """

        return PromptTemplate(
            input_variables=["input"],
            template=template
        )

    def create_contextualized_query(self, query: str) -> str:
        """Cria consulta contextualizada em portugu√™s (vers√£o legada)."""
        return self.create_contextualized_query_with_schema(query)

    def create_contextualized_query_with_schema(self, query: str) -> str:
        """Cria consulta contextualizada com documenta√ß√£o do schema."""

        # Obter sugest√µes de colunas baseadas na inten√ß√£o
        column_suggestions = schema_docs.get_column_suggestions(query)
        suggestions_text = ""
        if column_suggestions:
            suggestions_text = f"\nSUGEST√ïES DE COLUNAS PARA SUA PERGUNTA:\n" + "\n".join(f"- {s}" for s in column_suggestions)

        return f"""
        Responda em portugu√™s brasileiro: {query}
    
        IMPORTANTE - DOCUMENTA√á√ÉO ESPEC√çFICA:
        
        1. PARA MORTALIDADE:
           - Use MORTE = 1 para contar √≥bitos
           - N√ÉO use CID_MORTE > 0 (incorreto!)
           - CID_MORTE cont√©m a CAUSA da morte, n√£o indica se morreu
        
        2. PARA CIDADES:
           - Use CIDADE_RESIDENCIA_PACIENTE = 'Nome da Cidade'
           - N√ÉO use MUNIC_RES = c√≥digo (menos preciso)
           - Exemplos: 'Porto Alegre', 'Santa Maria', 'Caxias do Sul'
        
        3. PARA SEXO:
           - SEXO = 1 significa Masculino
           - SEXO = 3 significa Feminino
           - N√ÉO existe SEXO = 2
        
        4. PARA UTI:
           - UTI_MES_TO = 0 significa que N√ÉO ficou em UTI
           - UTI_MES_TO > 0 significa n√∫mero de dias em UTI
        
        5. QUERIES CORRETAS PARA MORTALIDADE:
           - Total de mortes: SELECT COUNT(*) FROM dados_sus3 WHERE MORTE = 1
           - Mortes por cidade: SELECT COUNT(*) FROM dados_sus3 WHERE CIDADE_RESIDENCIA_PACIENTE = 'Nome' AND MORTE = 1
           - Mortes por estado: SELECT COUNT(*) FROM dados_sus3 WHERE UF_RESIDENCIA_PACIENTE = 'UF' AND MORTE = 1
        
        {suggestions_text}
        
        SEMPRE valide se est√° usando as colunas corretas para o que foi perguntado!
        D√™ prefer√™ncia para nomes de cidades ao inv√©s de c√≥digos IBGE!
        """

    def get_custom_template(self) -> PromptTemplate:
        """Retorna o template personalizado."""
        return self.custom_template

    def get_mortality_correction_prompt(self) -> str:
        """Retorna prompt espec√≠fico para corre√ß√£o de consultas de mortalidade."""
        return """
        CORRE√á√ÉO IMPORTANTE SOBRE MORTALIDADE:
        
        ‚ùå INCORRETO: SELECT COUNT(*) FROM dados_sus3 WHERE CID_MORTE > 0
        ‚úÖ CORRETO: SELECT COUNT(*) FROM dados_sus3 WHERE MORTE = 1
        
        EXPLICA√á√ÉO:
        - MORTE = campo que indica se houve √≥bito (0=n√£o, 1=sim)
        - CID_MORTE = c√≥digo da CAUSA da morte (pode estar vazio mesmo quando houve morte)
        
        Use sempre MORTE = 1 para contar mortes!
        """

    def get_geography_correction_prompt(self) -> str:
        """Retorna prompt espec√≠fico para corre√ß√£o de consultas geogr√°ficas."""
        return """
        CORRE√á√ÉO IMPORTANTE SOBRE GEOGRAFIA:
        
        ‚ùå INCORRETO: SELECT COUNT(*) FROM dados_sus3 WHERE MUNIC_RES = 431490
        ‚úÖ CORRETO: SELECT COUNT(*) FROM dados_sus3 WHERE CIDADE_RESIDENCIA_PACIENTE = 'Porto Alegre'
        
        EXPLICA√á√ÉO:
        - MUNIC_RES = c√≥digo IBGE (pode ter dados incompletos)
        - CIDADE_RESIDENCIA_PACIENTE = nome completo da cidade (mais preciso)
        
        Use sempre o nome da cidade para maior precis√£o!
        """